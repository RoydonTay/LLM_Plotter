import streamlit as st
from langchain import OpenAI, SQLDatabase
from snowflake.snowpark import Session
from langchain.chains import create_sql_query_chain
import pandas as pd
import matplotlib

# App UI
st.title("DB Viz Generator")

user = st.text_input("Username")
password = st.text_input("Password", type="password")
openai_key = st.text_input("openai_key", type="password")
prompt = st.text_input("Enter prompt to plot graph") 

if st.button("Generate Graph", type='primary'):
    with st.spinner("Loading..."):
        # Create Snowpark session
        connection_parameters = {
        "account": "psai-csdw_usec",
        "user": user,
        "password": password,
        "database" : "DB_DEV",
        "schema" : "TEST_SCHEMA",
        "role": "DATA_SCIENTIST", 
        "warehouse": "COMPUTE_VWH",  # optional
        } 
        sp_session = Session.builder.configs(connection_parameters).create()

        # Initialize LLM, LangChain SQL agent prompt chain
        snowflake_account = "psai-csdw_usec"
        database= "DB_DEV"
        schema = "TEST_SCHEMA"
        warehouse = "COMPUTE_VWH"
        role = "DATA_SCIENTIST"

        snowflake_url = f"snowflake://{user}:{password}@{snowflake_account}/{database}/{schema}?warehouse={warehouse}&role={role}"
        db = SQLDatabase.from_uri(snowflake_url,sample_rows_in_table_info=1, include_tables=['orders', 'locations'])

        st.success("Successful Login!")

        llm = OpenAI(temperature=0, openai_api_key=openai_key)
        database_chain = create_sql_query_chain(llm,db)
        # Generate graph
        sql_query = database_chain.invoke({"question": prompt})

        # Split the string at "SQLResult:" and take the first part
        cleaned_string = sql_query.split('SQLResult:')[0].strip()
        cleaned_string = cleaned_string.strip(';')

        #we can visualize what sql query is generated by the LLM
        st.write('LLM Generated SQL Query: \n\n' + cleaned_string)

        df = sp_session.sql(cleaned_string).to_pandas()
        plot = df.plot(kind='bar', title="Generated Plot")
        st.pyplot(plot)

# Sample Prompts:
# Show the count of each product type
# Show the total quantity of each product.
# Show the total order amounts for the warehouses in New York and Chicago.